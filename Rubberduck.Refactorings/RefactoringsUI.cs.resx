<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnnotateDeclarationDialog_AnnotationLabel" xml:space="preserve">
    <value>Přidat Anotaci:</value>
  </data>
  <data name="AnnotateDeclarationDialog_AddArgumentButtonLabel" xml:space="preserve">
    <value>Přidat</value>
  </data>
  <data name="AnnotateDeclarationDialog_AdjustAttributeLabel" xml:space="preserve">
    <value>Přidat/Upravit atribut</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentsLabel" xml:space="preserve">
    <value>Argumenty Anotace:</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentTypeHeader" xml:space="preserve">
    <value>Typ</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentValueHeader" xml:space="preserve">
    <value>Hodnota</value>
  </data>
  <data name="AnnotateDeclarationDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Anotace Deklarace</value>
  </data>
  <data name="AnnotateDeclarationDialog_DeclarationLabel" xml:space="preserve">
    <value>Deklarace k Anotaci:</value>
  </data>
  <data name="AnnotateDeclarationDialog_Instructions" xml:space="preserve">
    <value>Vyberte anotaci (a hodnoty) pro přidání deklaraci.</value>
  </data>
  <data name="AnnotateDeclarationDialog_RemoveArgumentButtonLabel" xml:space="preserve">
    <value>Odstranit</value>
  </data>
  <data name="AnnotateDeclarationDialog_TitleText" xml:space="preserve">
    <value>Deklarace Anotace</value>
  </data>
  <data name="AnnotationArgument_ValidationError_AttributeNameStart" xml:space="preserve">
    <value>Argumenty anotace typu 'Attribute Name' musejí začínat 'VB_'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_EmptyArgument" xml:space="preserve">
    <value>Argumenty anotace nemohou být prázdné.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_InspectionName" xml:space="preserve">
    <value>Argumenty anotace typu 'Inspection Name' musejí být jméno existující inspekce.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_Newline" xml:space="preserve">
    <value>Argumenty anotace mohou obsahovat pouze jeden řádek.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotABoolean" xml:space="preserve">
    <value>Argumenty anotace typu 'Boolean' musejí být buď 'True' nebo 'False'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotANumber" xml:space="preserve">
    <value>Argumenty anotace typu 'Number' musejí být validní číslo ve formátu integer nebo float.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_SpecialCharacters" xml:space="preserve">
    <value>Argumenty anotace nesmějí obsahovat 'control' charaktery.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_TooLong" xml:space="preserve">
    <value>Argumenty anotace nemohou být delší než {0} charakterů.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_WhitespaceInAttribute" xml:space="preserve">
    <value>Argumenty anotace typu 'Attribute Name' nemohou obsahovat mezeru.</value>
  </data>
  <data name="AnnotationArgumentType_Inspection" xml:space="preserve">
    <value>Název Inspekce</value>
  </data>
  <data name="AnnotationArgumentType_Attribute" xml:space="preserve">
    <value>Atribut</value>
  </data>
  <data name="AnnotationArgumentType_Boolean" xml:space="preserve">
    <value>Boolean</value>
  </data>
  <data name="AnnotationArgumentType_Number" xml:space="preserve">
    <value>Číslo</value>
  </data>
  <data name="AnnotationArgumentType_Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="AssignedByValDialog_NewNameAlreadyUsedFormat" xml:space="preserve">
    <value>'{0}' je již přístupný v tomto rozsahu.</value>
  </data>
  <data name="AssignedByValDialog_MeaninglessNameFormat" xml:space="preserve">
    <value>{0} Zvaž použití jiného jména.</value>
  </data>
  <data name="AssignedByValParamQFixDialog_Caption" xml:space="preserve">
    <value>Přiřazen ByVal parametr QuickFix - Udělat Lokální Kopii</value>
  </data>
  <data name="AssignedByValParamQFixDialog_InstructionsLabelText" xml:space="preserve">
    <value>Prosím specifikujte název, který se má použít na lokální kopii ByVal {0} '{1}'.</value>
  </data>
  <data name="AssignedByValParamQFixDialog_TitleText" xml:space="preserve">
    <value>Specifikujte Název Kopie Lokální Proměnné</value>
  </data>
  <data name="EncapsulateField_InstructionText" xml:space="preserve">
    <value>Prosím, specifikujte jméno vlastnosti, přístupnost parametru a typ 'setteru'.</value>
  </data>
  <data name="EncapsulateField_WrapFieldsInPrivateType" xml:space="preserve">
    <value>Obalit Pole Privátním Typem</value>
  </data>
  <data name="EncapsulateField_TitleText" xml:space="preserve">
    <value>Zapouzdřit Pole</value>
  </data>
  <data name="EncapsulateField_SetterType" xml:space="preserve">
    <value>Typ Setteru:</value>
  </data>
  <data name="EncapsulateField_ReadOnlyCheckBoxContent" xml:space="preserve">
    <value>Pouze ke čtení</value>
  </data>
  <data name="EncapsulateField_PropertyName" xml:space="preserve">
    <value>Jméno Property:</value>
  </data>
  <data name="EncapsulateField_PrivateUDTPropertyText" xml:space="preserve">
    <value>Vytvoří property pro každý UDT člen</value>
  </data>
  <data name="EncapsulateField_PreviewMarker" xml:space="preserve">
    <value>'&lt;===== Změny v deklaraci a vlastnostech nad tímto řádkem =====&gt;</value>
  </data>
  <data name="EncapsulateField_Preview" xml:space="preserve">
    <value>Náhled:</value>
  </data>
  <data name="EncapsulateField_ParameterName" xml:space="preserve">
    <value>Název Parametru:</value>
  </data>
  <data name="EncapsulateField_NameConflictDetected" xml:space="preserve">
    <value>Konflikt názvu</value>
  </data>
  <data name="EncapsulateField_Caption" xml:space="preserve">
    <value>Rubberduck - Zapouzdřit Pole</value>
  </data>
  <data name="EncapsulateField_ArrayHasExternalRedimFormat" xml:space="preserve">
    <value>Nelze zapouzdřit '{0}'. ReDim ({0}) výrok(y) existují v jiných modulech.</value>
  </data>
  <data name="ExtractInterface_PublicInstancingMandatedByPublicClass" xml:space="preserve">
    <value>Implementovaná třída je 'Public', což nutí interface být také public.
Jestliže vyžadujete 'Private' interface, změňte instancování třídy na private.
Privání třída může stále implementovat public (veřejný) interface.</value>
  </data>
  <data name="ExtractInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Extrahovat Rozhraní</value>
  </data>
  <data name="ExtractInterface_InstancingGroupBox" xml:space="preserve">
    <value>Instancování</value>
  </data>
  <data name="ExtractInterface_InstructionLabel" xml:space="preserve">
    <value>Prosím, specifikujte jméno rozhraní a jeho členy.</value>
  </data>
  <data name="ExtractInterface_MembersGroupBox" xml:space="preserve">
    <value>Členové</value>
  </data>
  <data name="ExtractInterface_TitleLabel" xml:space="preserve">
    <value>Extrahovat Rozhraní</value>
  </data>
  <data name="ExtractMethod_ParametersLabel" xml:space="preserve">
    <value>Parametry:</value>
  </data>
  <data name="ExtractMethod_AccessibilityLabel" xml:space="preserve">
    <value>Přístupnost:</value>
  </data>
  <data name="ExtractMethod_Caption" xml:space="preserve">
    <value>Rubberduck - Metoda extrakce</value>
  </data>
  <data name="ExtractMethod_InstructionsText" xml:space="preserve">
    <value>Prosím specifikujte jméno metody, return typ a/nebo parametry (pokud je možné aplikovat) a další možnosti.</value>
  </data>
  <data name="ExtractMethod_InvalidSelectionMessage" xml:space="preserve">
    <value>Aktuální výběr není platný.</value>
  </data>
  <data name="ExtractMethod_OutputNone" xml:space="preserve">
    <value>(žádné)</value>
  </data>
  <data name="ExtractMethod_PreviewLabel" xml:space="preserve">
    <value>Náhled:</value>
  </data>
  <data name="ExtractMethod_ReturnLabel" xml:space="preserve">
    <value>Vrátit:</value>
  </data>
  <data name="ExtractMethod_SetBoxLabel" xml:space="preserve">
    <value>Nastavit</value>
  </data>
  <data name="ExtractMethod_TitleText" xml:space="preserve">
    <value>Extrahovat metodu</value>
  </data>
  <data name="ImplementInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Implementovat Rozhraní</value>
  </data>
  <data name="ImplementInterfaceFailed_NoImplementsStatementSelected" xml:space="preserve">
    <value>Nebyl vybrán žádný příkaz implementace.</value>
  </data>
</root>