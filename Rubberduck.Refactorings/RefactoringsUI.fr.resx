<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnnotateDeclarationDialog_AnnotationLabel" xml:space="preserve">
    <value>Annotation à ajouter:</value>
  </data>
  <data name="AnnotateDeclarationDialog_AddArgumentButtonLabel" xml:space="preserve">
    <value>Ajouter</value>
  </data>
  <data name="AnnotateDeclarationDialog_AdjustAttributeLabel" xml:space="preserve">
    <value>Ajouter/Ajuster l'Attribut</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentsLabel" xml:space="preserve">
    <value>Arguments de l'annotation:</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentTypeHeader" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentValueHeader" xml:space="preserve">
    <value>Valeur</value>
  </data>
  <data name="AnnotateDeclarationDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Annoter la Déclaration</value>
  </data>
  <data name="AnnotateDeclarationDialog_DeclarationLabel" xml:space="preserve">
    <value>Déclaration:</value>
  </data>
  <data name="AnnotateDeclarationDialog_Instructions" xml:space="preserve">
    <value>Sélectionner une annotation et les valeurs associées.</value>
  </data>
  <data name="AnnotateDeclarationDialog_RemoveArgumentButtonLabel" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="AnnotateDeclarationDialog_TitleText" xml:space="preserve">
    <value>Annoter la déclaration</value>
  </data>
  <data name="AnnotationArgument_ValidationError_AttributeNameStart" xml:space="preserve">
    <value>Les arguments de type 'Attribute Name' doivent débuter par 'VB_'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_EmptyArgument" xml:space="preserve">
    <value>Les arguments ne peuvent être laissés vides.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_InspectionName" xml:space="preserve">
    <value>Les arguments de type 'Inspection Name' doivent correspondre au nom d'une inspection existante.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_Newline" xml:space="preserve">
    <value>Les arguments d'annotations doivent tenir sur une seule ligne.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotABoolean" xml:space="preserve">
    <value>La valeur des arguments de type 'Boolean' doit être 'True' ou 'False'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotANumber" xml:space="preserve">
    <value>La valeur des arguments de type 'Number' doit être un nombre entier ou décimal valide.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_SpecialCharacters" xml:space="preserve">
    <value>La valeur des arguments ne doit pas contenir de caractères de contrôle.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_TooLong" xml:space="preserve">
    <value>La valeur des arguments ne peut dépasser {0} caractères.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_WhitespaceInAttribute" xml:space="preserve">
    <value>Les arguments de type 'Attribute Name' ne peuvent contenir d'espaces.</value>
  </data>
  <data name="AssignedByValDialog_NewNameAlreadyUsedFormat" xml:space="preserve">
    <value>'{0}' est déjà accessible à cette procédure.</value>
  </data>
  <data name="AssignedByValDialog_MeaninglessNameFormat" xml:space="preserve">
    <value>{0} Considérez utiliser un nom plus descriptif.</value>
  </data>
  <data name="AssignedByValParamQFixDialog_Caption" xml:space="preserve">
    <value>Introduire une variable locale</value>
  </data>
  <data name="AssignedByValParamQFixDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier le nom à utiliser pour la copie locale du paramètre {0} '{1}'.</value>
  </data>
  <data name="AssignedByValParamQFixDialog_TitleText" xml:space="preserve">
    <value>Nommer la variable locale</value>
  </data>
  <data name="EncapsulateField_InstructionText" xml:space="preserve">
    <value>Veuillez spécifier le nom, l'accessibilité des paramètres, et le type de mutateur pour la nouvelle propriété.</value>
  </data>
  <data name="EncapsulateField_WrapFieldsInPrivateType" xml:space="preserve">
    <value>Envelopper les champs dans une structure 'Private Type'</value>
  </data>
  <data name="EncapsulateField_TitleText" xml:space="preserve">
    <value>Encapsuler le champ</value>
  </data>
  <data name="EncapsulateField_SetterType" xml:space="preserve">
    <value>Type d'assignation:</value>
  </data>
  <data name="EncapsulateField_ReadOnlyCheckBoxContent" xml:space="preserve">
    <value>Lecture seule</value>
  </data>
  <data name="EncapsulateField_PropertyName" xml:space="preserve">
    <value>Nom de la propriété:</value>
  </data>
  <data name="EncapsulateField_PreviewMarker" xml:space="preserve">
    <value>'&lt;===== modifications aux propriétés et déclarations au-dessus de cette ligne =====&gt;</value>
  </data>
  <data name="EncapsulateField_Preview" xml:space="preserve">
    <value>Aperçu:</value>
  </data>
  <data name="EncapsulateField_ParameterName" xml:space="preserve">
    <value>Nom du paramètre:</value>
  </data>
  <data name="EncapsulateField_NameConflictDetected" xml:space="preserve">
    <value>Conflit de nom</value>
  </data>
  <data name="EncapsulateField_Caption" xml:space="preserve">
    <value>Rubberduck - Encapsuler le champ</value>
  </data>
  <data name="EncapsulateField_ArrayHasExternalRedimFormat" xml:space="preserve">
    <value>Impossible d'encapsuler le champ '{0}'. Une ou plusieurs instructions ReDim({0}) existent dans d'autres modules.</value>
  </data>
  <data name="ExtractInterface_PublicInstancingMandatedByPublicClass" xml:space="preserve">
    <value>La classe est publique, l'interface extraite sera donc publique également.
Si une interface privée est nécessaire, veuillez modifier le mode d'instanciation ("instancing") du module de classe pour 'Private'.
Une classe privée peut toujours implémenter une interface publique.</value>
  </data>
  <data name="ExtractInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Extraire une interface</value>
  </data>
  <data name="ExtractInterface_InstancingGroupBox" xml:space="preserve">
    <value>Instanciation</value>
  </data>
  <data name="ExtractInterface_InstructionLabel" xml:space="preserve">
    <value>Veuillez spécifier le nom et les membres de l'interface.</value>
  </data>
  <data name="ExtractInterface_MembersGroupBox" xml:space="preserve">
    <value>Membres</value>
  </data>
  <data name="ExtractInterface_TitleLabel" xml:space="preserve">
    <value>Extraire une interface</value>
  </data>
  <data name="ExtractMethod_ParametersLabel" xml:space="preserve">
    <value>Paramètres:</value>
  </data>
  <data name="ExtractMethod_AccessibilityLabel" xml:space="preserve">
    <value>Accessibilité:</value>
  </data>
  <data name="ExtractMethod_Caption" xml:space="preserve">
    <value>Rubberduck - Extraire une Méthode</value>
  </data>
  <data name="ExtractMethod_InstructionsText" xml:space="preserve">
    <value>Veuillez spécifier le nom de la méthode, le type de sa valeur de retour et les paramètres (si applicable).</value>
  </data>
  <data name="ExtractMethod_InvalidSelectionMessage" xml:space="preserve">
    <value>La sélection n'est pas valide.</value>
  </data>
  <data name="ExtractMethod_OutputNone" xml:space="preserve">
    <value>(aucun)</value>
  </data>
  <data name="ExtractMethod_PreviewLabel" xml:space="preserve">
    <value>Prévisualisation:</value>
  </data>
  <data name="ExtractMethod_ReturnLabel" xml:space="preserve">
    <value>Retour:</value>
  </data>
  <data name="ExtractMethod_SetBoxLabel" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="ExtractMethod_TitleText" xml:space="preserve">
    <value>Extraction d'une méthode</value>
  </data>
  <data name="ImplementInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Implémenter une interface</value>
  </data>
  <data name="ImplementInterfaceFailed_NoImplementsStatementSelected" xml:space="preserve">
    <value>Une instruction 'Implements' doit être sélectionnée.</value>
  </data>
  <data name="IntroduceField_Caption" xml:space="preserve">
    <value>Rubberduck - Introduire un champ</value>
  </data>
  <data name="IntroduceParameter_PromptIfTargetIsInterface" xml:space="preserve">
    <value>La méthode '{0}' implémente '{1}.{2}'. Modifier la signature de l'interface? (se propagera à toutes les implémentations)</value>
  </data>
  <data name="IntroduceFieldFailed_TargetIsAlreadyAField" xml:space="preserve">
    <value>La cible '{0}' est déjà un champ.</value>
  </data>
  <data name="IntroduceParameter_Caption" xml:space="preserve">
    <value>Rubberduck - Introduire un paramètre</value>
  </data>
  <data name="IntroduceParameterFailed_TargetNotContainedInMethod" xml:space="preserve">
    <value>La cible '{0}' n'est pas contenue dans une procédure.</value>
  </data>
</root>