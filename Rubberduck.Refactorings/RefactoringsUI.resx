<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnnotateDeclarationDialog_AddArgumentButtonLabel" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AnnotateDeclarationDialog_AdjustAttributeLabel" xml:space="preserve">
    <value>Add/Adjust attribute</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentsLabel" xml:space="preserve">
    <value>Annotation Arguments:</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentTypeHeader" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentValueHeader" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="AnnotateDeclarationDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Annotate Declaration</value>
  </data>
  <data name="AnnotateDeclarationDialog_DeclarationLabel" xml:space="preserve">
    <value>Declaration to Annotate:</value>
  </data>
  <data name="AnnotateDeclarationDialog_Instructions" xml:space="preserve">
    <value>Select an annotation (and values) to add to the declaration.</value>
  </data>
  <data name="AnnotateDeclarationDialog_RemoveArgumentButtonLabel" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="AnnotateDeclarationDialog_TitleText" xml:space="preserve">
    <value>Annotate Declaration</value>
  </data>
  <data name="AnnotateDeclarationDialog_AnnotationLabel" xml:space="preserve">
    <value>Annotation to Add:</value>
  </data>
  <data name="AnnotationArgument_ValidationError_AttributeNameStart" xml:space="preserve">
    <value>Annotation arguments of type 'Attribute Name' have to start with 'VB_'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_EmptyArgument" xml:space="preserve">
    <value>Annotation arguments cannot be empty.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_InspectionName" xml:space="preserve">
    <value>Annotation arguments of type 'Inspection Name' have to be the name of an existing inspection.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_Newline" xml:space="preserve">
    <value>Annotation arguments can only contain a single line.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotABoolean" xml:space="preserve">
    <value>Annotation arguments of type 'Boolean' have to either be 'True' or 'False'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotANumber" xml:space="preserve">
    <value>Annotation arguments of type 'Number' have to be a valid number in integer of floating point format.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_SpecialCharacters" xml:space="preserve">
    <value>Annotation arguments must not contain control characters.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_TooLong" xml:space="preserve">
    <value>Annotation arguments cannot be longer than {0} characters.</value>
    <comment>{0} max allowed characters</comment>
  </data>
  <data name="AnnotationArgument_ValidationError_WhitespaceInAttribute" xml:space="preserve">
    <value>Annotation arguments of type 'Attribute Name' cannot contain whitespace.</value>
  </data>
  <data name="AnnotationArgumentType_Inspection" xml:space="preserve">
    <value>Inspection Name</value>
  </data>
  <data name="AnnotationArgumentType_Attribute" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="AnnotationArgumentType_Boolean" xml:space="preserve">
    <value>Boolean</value>
  </data>
  <data name="AnnotationArgumentType_Number" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="AnnotationArgumentType_Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="AssignedByValDialog_NewNameAlreadyUsedFormat" xml:space="preserve">
    <value>'{0}' is already accessible to this scope.</value>
    <comment>{0} = proposed variable name.</comment>
  </data>
  <data name="AssignedByValDialog_MeaninglessNameFormat" xml:space="preserve">
    <value>{0} Consider choosing a different name.</value>
    <comment>{0} = Meaningless name message</comment>
  </data>
  <data name="AssignedByValParamQFixDialog_Caption" xml:space="preserve">
    <value>Assigned ByVal parameter QuickFix - Make Local Copy</value>
  </data>
  <data name="AssignedByValParamQFixDialog_InstructionsLabelText" xml:space="preserve">
    <value>Please specify a name to use for the local copy of ByVal {0} '{1}'.</value>
    <comment>0: DeclarationType; 1: IdentifierName</comment>
  </data>
  <data name="AssignedByValParamQFixDialog_TitleText" xml:space="preserve">
    <value>Specify Local Copy Variable Name</value>
  </data>
  <data name="EncapsulateField_InstructionText" xml:space="preserve">
    <value>Select one or more fields to encapsulate.  Accept the default values or edit property names.</value>
  </data>
  <data name="EncapsulateField_WrapFieldsInPrivateType" xml:space="preserve">
    <value>Wrap Fields in Private Type</value>
  </data>
  <data name="EncapsulateField_TitleText" xml:space="preserve">
    <value>Encapsulate Field</value>
  </data>
  <data name="EncapsulateField_SetterType" xml:space="preserve">
    <value>Setter Type:</value>
  </data>
  <data name="EncapsulateField_ReadOnlyCheckBoxContent" xml:space="preserve">
    <value>Read Only</value>
  </data>
  <data name="EncapsulateField_PropertyName" xml:space="preserve">
    <value>Property Name:</value>
  </data>
  <data name="EncapsulateField_PrivateUDTPropertyText" xml:space="preserve">
    <value>Creates a property for each UDT Member</value>
  </data>
  <data name="EncapsulateField_PreviewMarker" xml:space="preserve">
    <value>'&lt;===== Property and declaration changes above this line =====&gt;</value>
  </data>
  <data name="EncapsulateField_Preview" xml:space="preserve">
    <value>Preview:</value>
  </data>
  <data name="EncapsulateField_ParameterName" xml:space="preserve">
    <value>Parameter Name:</value>
  </data>
  <data name="EncapsulateField_NameConflictDetected" xml:space="preserve">
    <value>Name conflict</value>
  </data>
  <data name="EncapsulateField_Caption" xml:space="preserve">
    <value>Rubberduck - Encapsulate Field</value>
  </data>
  <data name="EncapsulateField_ArrayHasExternalRedimFormat" xml:space="preserve">
    <value>Unable to encapsulate '{0}'. ReDim({0}) statement(s) exist in other modules.</value>
    <comment>{0} = selected field IdentifierName</comment>
  </data>
  <data name="ExtractInterface_PublicInstancingMandatedByPublicClass" xml:space="preserve">
    <value>The implementing class is 'Public' mandating the interface be public as well.
If you require a 'Private' interface, change the classes instancing to private as well.
A private class can still implement a public interface.</value>
  </data>
  <data name="ExtractInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Extract Interface</value>
  </data>
  <data name="ExtractInterface_InstancingGroupBox" xml:space="preserve">
    <value>Instancing</value>
  </data>
  <data name="ExtractInterface_InstructionLabel" xml:space="preserve">
    <value>Please specify interface name and members.</value>
  </data>
  <data name="ExtractInterface_MembersGroupBox" xml:space="preserve">
    <value>Members</value>
  </data>
  <data name="ExtractInterface_Private" xml:space="preserve">
    <value>Private</value>
    <comment>keyword.. no translations.</comment>
  </data>
  <data name="ExtractInterface_Public" xml:space="preserve">
    <value>Public</value>
    <comment>keyword.. no translation.</comment>
  </data>
  <data name="ExtractInterface_TitleLabel" xml:space="preserve">
    <value>Extract Interface</value>
  </data>
  <data name="ExtractMethod_ParametersLabel" xml:space="preserve">
    <value>Parameters:</value>
  </data>
  <data name="ExtractMethod_AccessibilityLabel" xml:space="preserve">
    <value>Accessibility:</value>
  </data>
  <data name="ExtractMethod_Caption" xml:space="preserve">
    <value>Rubberduck - Extract Method</value>
  </data>
  <data name="ExtractMethod_InstructionsText" xml:space="preserve">
    <value>Please specify method name, return type and/or parameters (if applicable), and other options.</value>
  </data>
  <data name="ExtractMethod_InvalidSelectionMessage" xml:space="preserve">
    <value>The current selection is not valid.</value>
  </data>
  <data name="ExtractMethod_OutputNone" xml:space="preserve">
    <value>(none)</value>
  </data>
  <data name="ExtractMethod_PreviewLabel" xml:space="preserve">
    <value>Preview:</value>
  </data>
  <data name="ExtractMethod_ReturnLabel" xml:space="preserve">
    <value>Return:</value>
  </data>
  <data name="ExtractMethod_SetBoxLabel" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="ExtractMethod_TitleText" xml:space="preserve">
    <value>Extract method</value>
  </data>
  <data name="ImplementInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Implement Interface</value>
  </data>
  <data name="ImplementInterfaceFailed_NoImplementsStatementSelected" xml:space="preserve">
    <value>No implements selected.</value>
  </data>
  <data name="IntroduceField_Caption" xml:space="preserve">
    <value>Rubberduck - Introduce Field</value>
  </data>
  <data name="IntroduceParameter_PromptIfTargetIsInterface" xml:space="preserve">
    <value>Method '{0}' implements '{1}.{2}'. Change interface signature? (Will propagate to all implementations.)</value>
    <comment>0: Selected target; 1: Interface name; 2: Interface member name</comment>
  </data>
  <data name="IntroduceFieldFailed_TargetIsAlreadyAField" xml:space="preserve">
    <value>The target '{0}' is already a field.</value>
    <comment>{0}: name of target</comment>
  </data>
  <data name="IntroduceParameter_Caption" xml:space="preserve">
    <value>Rubberduck - Introduce Parameter</value>
  </data>
  <data name="IntroduceParameterFailed_TargetNotContainedInMethod" xml:space="preserve">
    <value>The target '{0}' is not contained in a method.</value>
    <comment>{0}: name of target</comment>
  </data>
</root>